package page

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"time"
	"velesbook/pkg"

	"github.com/gin-gonic/gin"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
type Page struct {
	ID        uint      `json:"id"`
	Title     string    `json:"title"`
	Content   string    `json:"content"`
	UserID    uint      `json:"user_id"`
	ParentID  *uint     `json:"parent_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func RegisterRoutes(router *gin.RouterGroup, db *sql.DB) {
	page := router.Group("/pages")
	{
		page.GET("/", getAllPages(db))
		page.GET("/my", getMyPages(db))
		page.POST("/create", —ÅreatePage(db))
		// DELETE /delete/{id} // —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å id
		// GET /{id} // –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å id
	}
}

func getMyPages(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		var pages []Page

		// –ü–æ–ª—É—á–∞–µ–º userID —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
		userIDUint, err := pkg.GetUserID(c)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞: %v", err)
			c.JSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
			return
		}

		log.Printf("üîç –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è userID: %d", userIDUint)

		// –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		rows, err := db.Query("SELECT id, title, content, user_id, parent_id, created_at, updated_at FROM pages WHERE user_id = ?", userIDUint)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
			return
		}
		defer rows.Close()

		// –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
		for rows.Next() {
			var page Page
			if err := rows.Scan(&page.ID, &page.Title, &page.Content, &page.UserID, &page.ParentID, &page.CreatedAt, &page.UpdatedAt); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"})
				return
			}
			pages = append(pages, page)
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫
		if err := rows.Err(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"})
			return
		}

		log.Printf("–°–≤–æ–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: %v", userIDUint)
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
		c.JSON(http.StatusOK, gin.H{
			"message": fmt.Sprintf("–°–≤–æ–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: %v", userIDUint),
			"pages":   pages,
		})
	}
}

// POST /pages/create
//
//	{
//	    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
//	    "content": "–¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
//	    "parent_id": null
//	}
func —ÅreatePage(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		var input struct {
			Title    string `json:"title" binding:"required"`
			Content  string `json:"content"`
			ParentID *uint  `json:"parent_id"` // –ú–æ–∂–µ—Ç –±—ã—Ç—å nil, –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç
		}
		// –ü–∞—Ä—Å–∏–º JSON-–∑–∞–ø—Ä–æ—Å
		if err := c.ShouldBindJSON(&input); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º userID —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
		userIDUint, err := pkg.GetUserID(c)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
			return
		}

		// –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		result, err := db.Exec("INSERT INTO pages (title, content, user_id, parent_id) VALUES (?, ?, ?, ?)", input.Title, input.Content, userIDUint, input.ParentID)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"})
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		pageID, err := result.LastInsertId()
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"})
			return
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		page := Page{
			ID:       uint(pageID),
			Title:    input.Title,
			Content:  input.Content,
			UserID:   userIDUint,
			ParentID: input.ParentID, // –ú–æ–∂–µ—Ç –±—ã—Ç—å nil, –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç
		}

		log.Printf("–°–æ–∑–¥–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: %v", userIDUint)
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
		c.JSON(http.StatusOK, gin.H{
			"message": fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID %d —Å–æ–∑–¥–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É", userIDUint),
			"page":    page,
		})
	}
}

// GET /pages
func getAllPages(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		var pages []Page

		// –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
		rows, err := db.Query("SELECT id, title, content, user_id, parent_id, created_at, updated_at FROM pages")
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü"})
			return
		}
		defer rows.Close()

		// –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
		for rows.Next() {
			var page Page
			if err := rows.Scan(&page.ID, &page.Title, &page.Content, &page.UserID, &page.ParentID, &page.CreatedAt, &page.UpdatedAt); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"})
				return
			}
			pages = append(pages, page)
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫
		if err := rows.Err(); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"})
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º userID —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
		userIDUint, err := pkg.GetUserID(c)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
			return
		}

		log.Printf("–í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: %v", userIDUint)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
		c.JSON(http.StatusOK, gin.H{
			"message": fmt.Sprintf("–í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: %v", userIDUint),
			"pages":   pages,
		})
	}
}
